create database ORG;
use ORG;
create table CUSTOMERS(
	CustomerID int primary key,
    Name varchar(225),
    Email varchar(255),
    JoinDate DATE
);

create table ProductS(
	ProductID int primary key,
    Name varchar(225),
    Category varchar(255),
    Price decimal(10,2)
);

create table Orders(
	OrderID int primary key,
    CustomerID int,
    OrderDate date,
    TotalAmount decimal(10,2),
    foreign key (CustomerID) references Customers(CustomerID)
);

create table OrderDetails(
	OrderDetailID int primary key,
    OrderID int,
    ProductID int,
    Quantity int,
    PricePerUnit decimal(10,2),
    foreign key (OrderID) references Orders(OrderID),
    foreign key (ProductID) references Products(ProductID)
); 

insert into CUSTOMERS (CustomerID ,Name ,Email , JoinDate)values
(1,'John Doe','JohnDoe@example.com','2020-01-10'),
(2,'Jane Smith','Janesmith@example.com','2020-01-15'),
(3,'Garv','Garv@example.com','2020-01-20'),
(4,'Garvi','Garvi@example.com','2020-01-18'),
(5,'Garvit','Garvit@example.com','2020-02-5'),
(6,'Mukesh','Mukesh@example.com','2020-02-15'),
(7,'Rajesh','Rajesh@example.com','2020-02-25'),
(8,'Himanshi','Himanshi@example.com','2020-02-17'),
(9,'Harshita','Harshita@example.com','2020-03-01'),
(10,'Alice Johnson','AliceJohnson@example.com','2020-03-05');


insert into ProductS(ProductID,Name,Category,Price)Values
(1,'Laptop','Electronics',999.99),
(2,'SmartPhone','Electronics',499.99),
(3,'Diary','Stationary',69.99),
(4,'Sofa','HomeDecor',5555.99),
(5,'Earphone','Electronics',29.99),
(6,'Dumbell','Fitness',15.99),
(7,'Speaker','Electronics',999.99),
(8,'Racket','Sports',100.99),
(9,'Shoes','Casual Wear',19.99),
(10,'Desk Lamp','HomeDecor',29.99);


insert into Orders (OrderID,CustomerID,OrderDate,TotalAmount)values
(1,1,"2020-02-15",1499.98),
(2,2,"2020-02-17",1499.98),
(3,3,"2020-02-19",1499.98),
(4,4,"2020-02-21",22.22),
(5,5,"2020-02-23", 188.99),
(6,6,"2020-02-25", 588.99),
(7,7,"2020-02-27", 88.99),
(8,8,"2020-03-17", 688.99),
(9,9,"2020-03-19", 21.99),
(10,10,"2020-03-21",78.99);

insert into OrderDetails (OrderDetailID,OrderID,ProductID,Quantity,PricePerUnit)values
(1,1,1,1,999.99),
(2,4,2,1,499.99),
(3,2,3,7,299.99),
(4,3,4,1,199.99),
(5,5,5,2,99.99),
(6,6,2,1,1499.99),
(7,9,6,5,6499.99),
(8,7,8,1,5499.99),
(9,8,10,1,1499.99),
(10,10,6,6,8499.99);


#BASIC QUERIRES.
#1.1 LIST ALL CUMSTOMERS: 
     select * from customers; 

#1.2 Show all products in the Electronics Category:
	select * from products where Category='Electronics';

#1.3 Find The total number of Orders Placed:
     select sum(Quantity)
     from OrderDetails;

#1.4 Display all details of the most recent Order.
     select * from orders order by OrderDate desc 
     
  
#2.1 List all the products along with the names of the customers who ordered them:
     select distinct Products.Name as ProductName, Customers.Name as CustomerName
     from Customers
     join Orders on Customers.CustomerID = Orders.CustomerID
	 join OrderDetails on Orders.OrderID = OrderDetails.OrderID
	 join Products on OrderDetails.ProductID = Products.ProductID;
     
#2.2 Show orders that include more than one Product:
     select Orders.OrderID, COUNT(OrderDetails.ProductID) as NumberOfProducts
     from Orders
	 join OrderDetails on Orders.OrderID = OrderDetails.OrderID
	 group by Orders.OrderID
     having COUNT(OrderDetails.ProductID) > 1;
     
#2.3. Find the total sales amount for each customer.
	
	select Customers.CustomerID, Customers.Name as CustomerName, SUM(OrderDetails.Quantity * OrderDetails.PricePerUnit) as TotalSalesAmount
    from Customers
    join Orders on Customers.CustomerID = Orders.CustomerID
    join OrderDetails on Orders.OrderID = OrderDetails.OrderID
    group by Customers.CustomerID, Customers.Name;
     
#3.1 Calculate the total revenue generated by each product 

    select Category , sum(Price) as TotalAmount
    from products
    group by Category

#3.2 Find Products that have never been ordered.
     
     select Products.*
     from Products
     left join OrderDetails on Products.ProductID = OrderDetails.ProductID
     group by  Products.ProductID
     having count(OrderDetails.ProductID) = 0;

#3.3 . Find the month with the highest number of orders

      select month(OrderDate) as Month, count(*) as NumberOfOrders
	  from Orders
      group by month(OrderDate)
      order by NumberOfOrders DESC

 #4.1  Identiy Customerd who have not placed any order 
       
       select *
       from customers
       where customerid not in (
       select distinct customerid
       from orders
);

#4.2 FInd Products that have never been ordered 
     
     select *
     from products
     where productid not in (
	 select distinct productid
     from orderdetails
);

#4.3  Show the top 3 best-selling products.
      select p.productid, p.name as productname, p.category, sum(od.quantity) as totalquantitysold
      from products p
	  inner join orderdetails od on p.productid = od.productid
      group by p.productid, p.name, p.category
      order by totalquantitysold desc
      limit 3;
 
 
 #5.1 List all orders in the last month 
     select *
     from orders
     where orderdate >= date_sub(current_date(), interval 1 month);


#5.2 Determine the oldesst Customer in terms of membership Duration
     select customerid, name, email, joindate
     from customers
     order by joindate
	 limit 1;

#6.1 Rank customers based on their total spending.
     
     select customerid, sum(totalamount) as total_spending,
	 rank() over (order by sum(totalamount) desc) as spending_rank
     from orders
     group by customerid
     order by total_spending desc;

#6.2   Identify the most popular product category.
      select category, count(*) as category_count
      from products
      group by category
      order by category_count desc
      limit 1;

#6.3  Calculate the month Over Month Growth rate in sales 
SELECT 
    current_month.order_month,
    (current_month.total_sales - previous_month.total_sales) / previous_month.total_sales * 100 AS growth_rate
FROM
    (SELECT 
        DATE_FORMAT(OrderDate, '%Y-%m') AS order_month,
        SUM(TotalAmount) AS total_sales
    FROM
        Orders
    GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')) current_month
JOIN
    (SELECT 
        DATE_FORMAT(OrderDate, '%Y-%m') AS order_month,
        SUM(TotalAmount) AS total_sales
    FROM
        Orders
    GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')) previous_month ON DATE_ADD(previous_month.order_month, INTERVAL 1 MONTH) = current_month.order_month;

#7.1 Add a new customer to the customers list

    insert into customers (CustomerID, Name, Email, JoinDate)
    values (11, 'New Customer', 'newcustomer@example.com', '2024-05-09');
    select * from customers
    
#7.2  Update the price of a specific product.
	
    update products
    set Price = 799.99
    where ProductID = 1;
    select * from products

